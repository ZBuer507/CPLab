Line1:	//line1	<	Note	,	-	>
Line2:	float	<	FLOAT	,	-	>
Line2:	a	<	IDN	,	a	>
Line2:	=	<	OP	,	=	>
Line2:	0.22	<	FCONST	,	0.22	>
Line2:	;	<	SEMI	,	-	>
Line3:	float	<	FLOAT	,	-	>
Line3:	b	<	IDN	,	b	>
Line3:	=	<	OP	,	=	>
Line3:	2.32e+1	<	SCONST	,	2.32e+1	>
Line3:	;	<	SEMI	,	-	>
Line4:	float	<	FLOAT	,	-	>
Line4:	c	<	IDN	,	c	>
Line4:	=	<	OP	,	=	>
Line4:	22.3E-1	<	SCONST	,	22.3E-1	>
Line4:	;	<	SEMI	,	-	>
Line5:	int	<	INT	,	-	>
Line5:	d	<	IDN	,	d	>
Line5:	=	<	OP	,	=	>
Line5:	22E1	<	SCONST	,	22E1	>
Line5:	;	<	SEMI	,	-	>
Line6:	int	<	INT	,	-	>
Line6:	e	<	IDN	,	e	>
Line6:	=	<	OP	,	=	>
Line6:	0x9af	<	HCONST	,	0x9af	>
Line6:	;	<	SEMI	,	-	>
Line7:	int	<	INT	,	-	>
Line7:	f	<	IDN	,	f	>
Line7:	=	<	OP	,	=	>
Line7:	0666	<	OCONST	,	0666	>
Line7:	;	<	SEMI	,	-	>
Line8:	String	<	STRING	,	-	>
Line8:	name	<	IDN	,	name	>
Line8:	=	<	OP	,	=	>
Line8:	"ZhengJiaTao"	<	STRCONST	,	"ZhengJiaTao"	>
Line8:	;	<	SEMI	,	-	>
Line12:	/*\r\nline1\r\nline2\r\n*/	<	Note	,	-	>
Line14:	/* note */	<	Note	,	-	>
Line15:	void	<	VOID	,	-	>
Line15:	function	<	IDN	,	function	>
Line15:	(	<	SLP	,	-	>
Line15:	int	<	INT	,	-	>
Line15:	*	<	OP	,	*	>
Line15:	node	<	IDN	,	node	>
Line15:	)	<	SRP	,	-	>
Line16:	{	<	LP	,	-	>
Line17:	for	<	FOR	,	-	>
Line17:	(	<	SLP	,	-	>
Line17:	int	<	INT	,	-	>
Line17:	i	<	IDN	,	i	>
Line17:	=	<	OP	,	=	>
Line17:	0	<	OCONST	,	0	>
Line17:	;	<	SEMI	,	-	>
Line17:	i	<	IDN	,	i	>
Line17:	<	<	ERROR	,	-	>
Line17:	n	<	IDN	,	n	>
Line17:	-	<	OP	,	-	>
Line17:	1	<	CONST	,	1	>
Line17:	;	<	SEMI	,	-	>
Line17:	i	<	IDN	,	i	>
Line17:	++	<	OP	,	++	>
Line17:	)	<	SRP	,	-	>
Line18:	node	<	IDN	,	node	>
Line18:	[	<	MLP	,	-	>
Line18:	i	<	IDN	,	i	>
Line18:	]	<	MRP	,	-	>
Line18:	=	<	OP	,	=	>
Line18:	0	<	OCONST	,	0	>
Line18:	;	<	SEMI	,	-	>
Line19:	}	<	RP	,	-	>
Line21:	int	<	INT	,	-	>
Line21:	main	<	IDN	,	main	>
Line21:	(	<	SLP	,	-	>
Line21:	)	<	SRP	,	-	>
Line22:	{	<	LP	,	-	>
Line23:	int	<	INT	,	-	>
Line23:	arr	<	IDN	,	arr	>
Line23:	[	<	MLP	,	-	>
Line23:	]	<	MRP	,	-	>
Line23:	=	<	OP	,	=	>
Line23:	[	<	MLP	,	-	>
Line23:	1	<	CONST	,	1	>
Line23:	,	<	COL	,	-	>
Line23:	2	<	CONST	,	2	>
Line23:	,	<	COL	,	-	>
Line23:	3	<	CONST	,	3	>
Line23:	,	<	COL	,	-	>
Line23:	4	<	CONST	,	4	>
Line23:	,	<	COL	,	-	>
Line23:	5	<	CONST	,	5	>
Line23:	]	<	MRP	,	-	>
Line23:	;	<	SEMI	,	-	>
Line24:	function	<	IDN	,	function	>
Line24:	(	<	SLP	,	-	>
Line24:	arr	<	IDN	,	arr	>
Line24:	)	<	SRP	,	-	>
Line24:	;	<	SEMI	,	-	>
Line25:	return	<	RETURN	,	-	>
Line25:	0	<	OCONST	,	0	>
Line25:	;	<	SEMI	,	-	>
Line26:	}	<	RP	,	-	>
Line27:	while	<	WHILE	,	-	>
Line27:	(	<	SLP	,	-	>
Line27:	num	<	IDN	,	num	>
Line27:	!=	<	OP	,	!=	>
Line27:	100	<	OCONST	,	100	>
Line27:	)	<	SRP	,	-	>
Line28:	{	<	LP	,	-	>
Line29:	num	<	IDN	,	num	>
Line29:	++	<	OP	,	++	>
Line29:	;	<	SEMI	,	-	>
Line30:	}	<	RP	,	-	>
Line32:	/* bug test */	<	Note	,	-	>
Line33:	int	<	INT	,	-	>
Lexical error at Line33:"1_bug" Error
Line33:	=	<	OP	,	=	>
Line33:	3	<	CONST	,	3	>
Line33:	;	<	SEMI	,	-	>
Line34:	float	<	FLOAT	,	-	>
Line34:	bug1	<	IDN	,	bug1	>
Line34:	=	<	OP	,	=	>
Lexical error at Line34:"1.1.1" Error
Line34:	;	<	SEMI	,	-	>
Line35:	float	<	FLOAT	,	-	>
Line35:	bug2	<	IDN	,	bug2	>
Line35:	=	<	OP	,	=	>
Lexical error at Line35:"2..2" Error
Line35:	;	<	SEMI	,	-	>
Line36:	float	<	FLOAT	,	-	>
Line36:	bug3	<	IDN	,	bug3	>
Line36:	=	<	OP	,	=	>
Lexical error at Line36:"." Unknown expression
Line36:	;	<	SEMI	,	-	>
Line37:	int	<	INT	,	-	>
Line37:	bug4	<	IDN	,	bug4	>
Line37:	=	<	OP	,	=	>
Lexical error at Line37:"0xag" Error
Line37:	;	<	SEMI	,	-	>
Line38:	int	<	INT	,	-	>
Line38:	bug5	<	IDN	,	bug5	>
Line38:	=	<	OP	,	=	>
Lexical error at Line38:"099" Error
Line38:	;	<	SEMI	,	-	>
Line39:	char	<	CHAR	,	-	>
Line39:	bug6	<	IDN	,	bug6	>
Line39:	=	<	OP	,	=	>
Lexical error at Line39:"'a" Char error
Line39:	;	<	SEMI	,	-	>
Line40:	String	<	STRING	,	-	>
Line40:	bug7	<	IDN	,	bug7	>
Line40:	=	<	OP	,	=	>
Lexical error at Line40:""bianyiyuanli;" String error
Lexical error at Line46:"/*bug8\r\n\r\n\r\n\r\n\r\n" Note error
